/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockAaveV3Pool,
  MockAaveV3PoolInterface,
} from "../../../contracts/aave/MockAaveV3Pool";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "usdt",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "usdtDecimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "USDT",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "aUSDT",
    outputs: [
      {
        internalType: "contract MockAToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "onBehalfOf",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    name: "supply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b506040516115a93803806115a983398101604081905261002f9161013a565b6001600160a01b0382166100755760405162461bcd60e51b8152602060048201526009602482015268555344545f5a45524f60b81b604482015260640160405180910390fd5b6001600160a01b038216608052604051819030906100929061012d565b6080808252601a908201527f4161766520696e7465726573742062656172696e67205553445400000000000060a082015260c06020820181905260059082015264185554d11560da1b60e082015260ff90921660408301526001600160a01b0316606082015261010001604051809103906000f080158015610118573d6000803e3d6000fd5b506001600160a01b031660a052506101869050565b610c828061092783390190565b6000806040838503121561014d57600080fd5b82516001600160a01b038116811461016457600080fd5b602084015190925060ff8116811461017b57600080fd5b809150509250929050565b60805160a05161074e6101d96000396000818160d0015281816102c8015281816103fb01526104ea01526000818160910152818160f4015281816101ea0152818161032f0152610572015261074e6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063617ba0371461005157806369328dec14610066578063c54e44eb1461008c578063e2dbcb15146100cb575b600080fd5b61006461005f366004610644565b6100f2565b005b61007961007436600461069a565b61032b565b6040519081526020015b60405180910390f35b6100b37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610083565b6100b37f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161461016e5760405162461bcd60e51b81526020600482015260136024820152721054d4d15517d393d517d4d5541413d4951151606a1b60448201526064015b60405180910390fd5b600083116101ac5760405162461bcd60e51b815260206004820152600b60248201526a16915493d7d05353d5539560aa1b6044820152606401610165565b60006001600160a01b038316156101c357826101c5565b335b6040516323b872dd60e01b8152336004820152306024820152604481018690529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561023b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025f91906106d6565b6102a25760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610165565b6040516340c10f1960e01b81526001600160a01b038281166004830152602482018690527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561030c57600080fd5b505af1158015610320573d6000803e3d6000fd5b505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316146103a45760405162461bcd60e51b81526020600482015260136024820152721054d4d15517d393d517d4d5541413d4951151606a1b6044820152606401610165565b6001600160a01b0382166103e35760405162461bcd60e51b81526020600482015260066024820152654241445f544f60d01b6044820152606401610165565b6040516370a0823160e01b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561044a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046e91906106ff565b9050600060001985146104815784610483565b815b90506000811180156104955750818111155b6104ce5760405162461bcd60e51b815260206004820152600a60248201526910905117d05353d5539560b21b6044820152606401610165565b604051632770a7eb60e21b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639dc29fac90604401600060405180830381600087803b15801561053657600080fd5b505af115801561054a573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038781166004830152602482018590527f000000000000000000000000000000000000000000000000000000000000000016925063a9059cbb91506044016020604051808303816000875af11580156105bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e191906106d6565b61061f5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610165565b95945050505050565b80356001600160a01b038116811461063f57600080fd5b919050565b6000806000806080858703121561065a57600080fd5b61066385610628565b93506020850135925061067860408601610628565b9150606085013561ffff8116811461068f57600080fd5b939692955090935050565b6000806000606084860312156106af57600080fd5b6106b884610628565b9250602084013591506106cd60408501610628565b90509250925092565b6000602082840312156106e857600080fd5b815180151581146106f857600080fd5b9392505050565b60006020828403121561071157600080fd5b505191905056fea2646970667358221220b27a3143a19b06ec92ad0a12da128b067d66a2f0e78b8c24652609733a70bea864736f6c6343000814003360c06040523480156200001157600080fd5b5060405162000c8238038062000c82833981016040819052620000349162000138565b838360036200004483826200026b565b5060046200005382826200026b565b50505060ff90911660a0526001600160a01b031660805250620003379050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200009b57600080fd5b81516001600160401b0380821115620000b857620000b862000073565b604051601f8301601f19908116603f01168101908282118183101715620000e357620000e362000073565b816040528381526020925086838588010111156200010057600080fd5b600091505b8382101562000124578582018301518183018401529082019062000105565b600093810190920192909252949350505050565b600080600080608085870312156200014f57600080fd5b84516001600160401b03808211156200016757600080fd5b620001758883890162000089565b955060208701519150808211156200018c57600080fd5b506200019b8782880162000089565b935050604085015160ff81168114620001b357600080fd5b60608601519092506001600160a01b0381168114620001d157600080fd5b939692955090935050565b600181811c90821680620001f157607f821691505b6020821081036200021257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200026657600081815260208120601f850160051c81016020861015620002415750805b601f850160051c820191505b8181101562000262578281556001016200024d565b5050505b505050565b81516001600160401b0381111562000287576200028762000073565b6200029f81620002988454620001dc565b8462000218565b602080601f831160018114620002d75760008415620002be5750858301515b600019600386901b1c1916600185901b17855562000262565b600085815260208120601f198616915b828110156200030857888601518255948401946001909101908401620002e7565b5085821015620003275787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a0516109176200036b60003960006101260152600081816101930152818161030f015261039501526109176000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a08231146101655780637535d2461461018e57806395d89b41146101cd5780639dc29fac146101d5578063a9059cbb146101e8578063dd62ed3e146101fb57600080fd5b806306fdde03146100b9578063095ea7b3146100d757806318160ddd146100fa57806323b872dd1461010c578063313ce5671461011f57806340c10f1914610150575b600080fd5b6100c1610234565b6040516100ce9190610761565b60405180910390f35b6100ea6100e53660046107cb565b6102c6565b60405190151581526020016100ce565b6002545b6040519081526020016100ce565b6100ea61011a3660046107f5565b6102e0565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016100ce565b61016361015e3660046107cb565b610304565b005b6100fe610173366004610831565b6001600160a01b031660009081526020819052604090205490565b6101b57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100ce565b6100c161037b565b6101636101e33660046107cb565b61038a565b6100ea6101f63660046107cb565b6103f8565b6100fe610209366004610853565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461024390610886565b80601f016020809104026020016040519081016040528092919081815260200182805461026f90610886565b80156102bc5780601f10610291576101008083540402835291602001916102bc565b820191906000526020600020905b81548152906001019060200180831161029f57829003601f168201915b5050505050905090565b6000336102d4818585610406565b60019150505b92915050565b6000336102ee858285610418565b6102f9858585610497565b506001949350505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461036d5760405162461bcd60e51b815260206004820152600960248201526813d3931657d413d3d360ba1b60448201526064015b60405180910390fd5b61037782826104f6565b5050565b60606004805461024390610886565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103ee5760405162461bcd60e51b815260206004820152600960248201526813d3931657d413d3d360ba1b6044820152606401610364565b610377828261052c565b6000336102d4818585610497565b6104138383836001610562565b505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811015610491578181101561048257604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610364565b61049184848484036000610562565b50505050565b6001600160a01b0383166104c157604051634b637e8f60e11b815260006004820152602401610364565b6001600160a01b0382166104eb5760405163ec442f0560e01b815260006004820152602401610364565b610413838383610637565b6001600160a01b0382166105205760405163ec442f0560e01b815260006004820152602401610364565b61037760008383610637565b6001600160a01b03821661055657604051634b637e8f60e11b815260006004820152602401610364565b61037782600083610637565b6001600160a01b03841661058c5760405163e602df0560e01b815260006004820152602401610364565b6001600160a01b0383166105b657604051634a1406b160e11b815260006004820152602401610364565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561049157826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161062991815260200190565b60405180910390a350505050565b6001600160a01b03831661066257806002600082825461065791906108c0565b909155506106d49050565b6001600160a01b038316600090815260208190526040902054818110156106b55760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610364565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166106f05760028054829003905561070f565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161075491815260200190565b60405180910390a3505050565b600060208083528351808285015260005b8181101561078e57858101830151858201604001528201610772565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146107c657600080fd5b919050565b600080604083850312156107de57600080fd5b6107e7836107af565b946020939093013593505050565b60008060006060848603121561080a57600080fd5b610813846107af565b9250610821602085016107af565b9150604084013590509250925092565b60006020828403121561084357600080fd5b61084c826107af565b9392505050565b6000806040838503121561086657600080fd5b61086f836107af565b915061087d602084016107af565b90509250929050565b600181811c9082168061089a57607f821691505b6020821081036108ba57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102da57634e487b7160e01b600052601160045260246000fdfea264697066735822122054f33459c6e1c71457f177278e9e476d366ebcc5172e974aa1bbcd549310c29a64736f6c63430008140033";

type MockAaveV3PoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAaveV3PoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAaveV3Pool__factory extends ContractFactory {
  constructor(...args: MockAaveV3PoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    usdt: AddressLike,
    usdtDecimals: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(usdt, usdtDecimals, overrides || {});
  }
  override deploy(
    usdt: AddressLike,
    usdtDecimals: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(usdt, usdtDecimals, overrides || {}) as Promise<
      MockAaveV3Pool & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockAaveV3Pool__factory {
    return super.connect(runner) as MockAaveV3Pool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAaveV3PoolInterface {
    return new Interface(_abi) as MockAaveV3PoolInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockAaveV3Pool {
    return new Contract(address, _abi, runner) as unknown as MockAaveV3Pool;
  }
}
